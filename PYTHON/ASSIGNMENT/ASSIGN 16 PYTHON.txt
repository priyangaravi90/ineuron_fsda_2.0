1. Create a list called years_list, starting with the year of your birth, and each year thereafter until
the year of your fifth birthday. For example, if you were born in 1980. the list would be years_list =
[1980, 1981, 1982, 1983, 1984, 1985].

If we start from the year 1980, the list would look like this:
years_list = [1980, 1981, 1982, 1983, 1984, 1985]
print(years_list)

Output:
[1980, 1981, 1982, 1983, 1984, 1985]


2. In which year in years_list was your third birthday? Remember, you were 0 years of age for your
first year.

If we consider that you were 0 years old for your first year (meaning your first year of life was from birth to your first birthday), then your third birthday would have occurred in the year that is 3 years after your birth year. So, in the example list [1980, 1981, 1982, 1983, 1984, 1985], your third birthday would have been in the year 1983.


3.In the years list, which year were you the oldest?

In the example years list [1980, 1981, 1982, 1983, 1984, 1985], you would be the oldest in the last year, which is 1985.


4. Make a list called things with these three strings as elements: "mozzarella", "cinderella",
"salmonella".

Certainly, here's the list with the provided strings as elements:
things = ["mozzarella", "cinderella", "salmonella"]
print(things)

Output:
['mozzarella', 'cinderella', 'salmonella']



5. Capitalize the element in things that refers to a person and then print the list. Did it change the
element in the list?

I can capitalize the element in the list that refers to a person and then print the updated list. In this case, "cinderella" refers to a person. Let's capitalize it:

things = ["mozzarella", "cinderella", "salmonella"]
things[1] = things[1].capitalize()
print(things)

Output:
['mozzarella', 'Cinderella', 'salmonella']

As you can see, the element "cinderella" has been capitalized and is now "Cinderella" in the updated list.


6. Make a surprise list with the elements "Groucho" ,"Chico" and "Harpo"

Certainly, here's the surprise list with the provided elements:
surprise = ["Groucho", "Chico", "Harpo"]
print(surprise)

Output:
['Groucho', 'Chico', 'Harpo']


7. Lowercase the last element of the surprise list, reverse it, and then capitalize it.

Sure, here's how you can lowercase the last element of the surprise list, reverse it, and then capitalize it:
surprise = ["Groucho", "Chico", "Harpo"]
last_element = surprise[-1].lower()  # Lowercase the last element
reversed_element = last_element[::-1]  # Reverse the lowercase element
capitalized_element = reversed_element.capitalize()  # Capitalize the reversed element
print(capitalized_element)

Output:
After performing these operations, the last element "Harpo" becomes "Oprah".


8. Make an English-to-French dictionary called e2f and print it. Here are your starter words: dog is
chien, cat is chat, and walrus is morse.

here's the English-to-French dictionary with the provided starter words:
e2f = {
    "dog": "chien",
    "cat": "chat",
    "walrus": "morse"
}

print(e2f)

Output:
{'dog': 'chien', 'cat': 'chat', 'walrus': 'morse'}



9. Write the French word for walrus in your three-word dictionary e2f.

In the dictionary e2f, the French word for "walrus" is "morse".


10. Make a French-to-English dictionary called f2e from e2f. Use the items method.

here's how you can create a French-to-English dictionary f2e from the e2f dictionary using the items() method:
e2f = {
    "dog": "chien",
    "cat": "chat",
    "walrus": "morse"
}

f2e = {value: key for key, value in e2f.items()}
print(f2e)

Output:
{'chien': 'dog', 'chat': 'cat', 'morse': 'walrus'}

This code creates a new dictionary f2e where the keys and values are swapped from the e2f dictionary using a dictionary comprehension and the items() method.


11. Print the English version of the French word chien using f2e.

You can print the English version of the French word "chien" using the f2e dictionary like this:
f2e = {
    'chien': 'dog',
    'chat': 'cat',
    'morse': 'walrus'
}

french_word = 'chien'
english_translation = f2e[french_word]
print(english_translation)


Output:
dog

In this example, the dictionary f2e is used to look up the English translation of the French word "chien", which is "dog".




12. Make and print a set of English words from the keys in e2f.

Certainly, here's how you can create a set of English words from the keys in the e2f dictionary and then print it:


e2f = {
    "dog": "chien",
    "cat": "chat",
    "walrus": "morse"
}

english_words = set(e2f.keys())
print(english_words)

Output:
{'dog', 'cat', 'walrus'}

In this example, the keys() method is used to retrieve the keys (English words) from the e2f dictionary, and then the set() function is used to create a set containing those keys. Finally, the set of English words is printed.



13. Make a multilevel dictionary called life. Use these strings for the topmost keys: "animals", "plants",
and "other". Make the "animals" key refer to another dictionary with the keys "cats", "octopi", and
"emus". Make the "cats" key refer to a list of strings with the values "Henri", "Grumpy", and "Lucy".
Make all the other keys refer to empty dictionaries.

here's how you can create the multilevel dictionary called life as you described:
life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}
print(life)

Output:
{
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

In this example, the dictionary life is structured with nested dictionaries as specified. The 'animals' key refers to a dictionary containing keys 'cats', 'octopi', and 'emus', and the 'cats' key further refers to a list of cat names. The other keys ('plants' and 'other') refer to empty dictionaries.


14. Print the top-level keys of life.

You can print the top-level keys of the life dictionary using the keys() method:
life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

top_level_keys = life.keys()
print(top_level_keys)


Output:
dict_keys(['animals', 'plants', 'other'])

In this example, keys() method is used to retrieve the top-level keys ('animals', 'plants', 'other') of the life dictionary, and they are then printed.



15. Print the keys for life["animals"].

You can print the keys for the 'animals' dictionary within the life dictionary using the keys() method:
life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

animals_keys = life['animals'].keys()
print(animals_keys)

Output:
dict_keys(['cats', 'octopi', 'emus'])

In this example, life['animals'].keys() retrieves the keys ('cats', 'octopi', 'emus') for the nested dictionary under the 'animals' key, and then they are printed.


16. Print the values for life["animals"]["cats"]

You can print the values for life['animals']['cats'] using the following code:
life = {
    'animals': {
        'cats': ['Henri', 'Grumpy', 'Lucy'],
        'octopi': {},
        'emus': {}
    },
    'plants': {},
    'other': {}
}

cat_values = life['animals']['cats']
print(cat_values)

Output:
['Henri', 'Grumpy', 'Lucy']

In this example, life['animals']['cats'] accesses the list of cat names within the nested dictionary under the 'animals' key, and then it is printed.